@model eContentApp.Web.Models.PostDetailViewModel

@{
    ViewData["Title"] = Model.Title;
}

<div class="container">
    <div id="post-display">
        <h1 id="post-title-display">@Model.Title</h1>
        <p>Published on: @Model.PublishedAt.ToShortDateString()</p>
        <hr />
        <div id="post-content-display">
            @Html.Raw(Model.Content)
        </div>
        <button id="edit-button" class="btn btn-primary">Edit</button>
        <button id="delete-button" class="btn btn-danger">Delete</button>
    </div>

    <div id="post-edit" style="display:none;">
        <input type="hidden" id="post-id" value="@Model.Id" />
        <div class="form-group">
            <label for="edit-title">Title</label>
            <input type="text" id="edit-title" class="form-control" value="@Model.Title" />
        </div>
        <div class="form-group">
            <label for="edit-content">Content</label>
            <div id="editor" style="height: 300px;"></div>
        </div>
        <button id="save-button" class="btn btn-success">Save</button>
        <button id="cancel-button" class="btn btn-secondary">Cancel</button>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script>
        var quill;

        $(document).ready(function () {
            quill = new Quill('#editor', {
                theme: 'snow',
                modules: {
                    toolbar: {
                        container: [
                            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
                            ['blockquote', 'code-block'],

                            [{ 'header': 1 }, { 'header': 2 }],               // custom button values
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
                            [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
                            [{ 'direction': 'rtl' }],                         // text direction

                            [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
                            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

                            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
                            [{ 'font': [] }],
                            [{ 'align': [] }],

                            ['link', 'image'], // Add image button

                            ['clean']                                         // remove formatting button
                        ],
                        handlers: {
                            'image': imageHandler
                        }
                    }
                }
            });

            function imageHandler() {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');
                input.click();

                input.onchange = async () => {
                    var file = input.files[0];
                    var formData = new FormData();
                    formData.append('file', file);

                    try {
                        const response = await fetch('http://localhost:5026/api/media/upload', {
                            method: 'POST',
                            body: formData
                        });

                        const result = await response.json();
                        if (response.ok) {
                            const range = quill.getSelection();
                            quill.insertEmbed(range.index, 'image', result.url);
                        } else {
                            console.error('Image upload failed:', result.message);
                            alert('Image upload failed: ' + result.message);
                        }
                    } catch (error) {
                        console.error('Error uploading image:', error);
                        alert('Error uploading image: ' + error.message);
                    }
                };
            }

            // Set initial content for the editor
            quill.root.innerHTML = `@Html.Raw(Model.Content)`;

            $('#edit-button').on('click', function () {
                $('#post-display').hide();
                $('#post-edit').show();
                quill.root.innerHTML = $('#post-content-display').html(); // Load current content into editor
            });

            $('#cancel-button').on('click', function () {
                $('#post-edit').hide();
                $('#post-display').show();
                // Revert title if changed
                $('#edit-title').val($('#post-title-display').text());
            });

            $('#save-button').on('click', function () {
                var postId = $('#post-id').val();
                var updatedTitle = $('#edit-title').val();
                var updatedContent = quill.root.innerHTML; // Get HTML content from Quill

                var postData = {
                    id: postId,
                    title: updatedTitle,
                    content: updatedContent,
                    // Include other necessary fields from your UpdatePostDto if they are required by the API
                    // For example, if CategoryIds is required, you'd need to fetch and send them.
                    // For now, assuming only title and content are being updated.
                    categoryIds: @Html.Raw(Json.Serialize(Model.Categories.Select(c => c.Id))) // Pass existing categories
                };

                $.ajax({
                    url: 'http://localhost:5026/api/posts/' + postId,
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(postData),
                    success: function () {
                        alert('Post updated successfully!');
                        $('#post-title-display').text(updatedTitle);
                        $('#post-content-display').html(updatedContent);
                        $('#post-edit').hide();
                        $('#post-display').show();
                    },
                    error: function (xhr, status, error) {
                        alert('Error updating post: ' + xhr.responseText);
                        console.error(xhr.responseText);
                    }
                });
            });

            $('#delete-button').on('click', function () {
                var postId = $('#post-id').val();
                if (confirm('Are you sure you want to delete this post?')) {
                    $.ajax({
                        url: 'http://localhost:5026/api/posts/' + postId,
                        type: 'DELETE',
                        success: function () {
                            alert('Post deleted successfully!');
                            window.location.href = '/Home/Index'; // Redirect to post list
                        },
                        error: function (xhr, status, error) {
                            alert('Error deleting post: ' + xhr.responseText);
                            console.error(xhr.responseText);
                        }
                    });
                }
            });
        });
    </script>
}
